generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  loginId   String   @unique
  password  String
  userName  String   @db.VarChar(20)
  phone     String   @unique @db.VarChar(11)
  email     String   @unique
  createdAt DateTime @default(now())
  Member    Member[]
  Token     Token[]
}

model Group {
  id            Int             @id @default(autoincrement())
  groupName     String          @unique
  createdAt     DateTime        @default(now())
  Member        Member[]
  Payment       Payment[]
  Renewal       Renewal[]
  Requirement   Requirement[]
  TempMember    TempMember[]
  Activity      Activity[]
  Qualification Qualification[]
}

model Member {
  id           Int           @id @default(autoincrement())
  userId       Int?
  groupId      Int
  joinedAt     DateTime      @default(now())
  memberNumber String
  userName     String        @db.VarChar(20)
  phone        String        @db.VarChar(11)
  email        String
  postalCode   String        @default("-") @db.VarChar(6)
  address1     String?       @db.VarChar(200)
  address2     String?       @db.VarChar(200)
  grade        String        @default("basic")
  role         String        @default("member")
  status       String        @default("active")
  createdAt    DateTime      @default(now())
  Group        Group         @relation(fields: [groupId], references: [id])
  User         User?         @relation(fields: [userId], references: [id], onDelete: Restrict)
  Payment      Payment[]
  Renewal      Renewal[]
  Attendee     Attendee[]
  Acquisition  Acquisition[]

  @@unique([userId, groupId])
  @@unique([groupId, phone])
  @@unique([groupId, email])
  @@unique([groupId, memberNumber])
  @@index([groupId], map: "Member_groupId_fkey")
}

model TempMember {
  id           Int      @id @default(autoincrement())
  groupId      Int
  joinedAt     DateTime @default(now())
  memberNumber String
  userName     String   @db.VarChar(20)
  phone        String   @db.VarChar(11)
  email        String
  postalCode   String   @default("-") @db.VarChar(6)
  address1     String?  @db.VarChar(200)
  address2     String?  @db.VarChar(200)
  grade        String   @default("basic")
  role         String   @default("member")
  status       String   @default("active")
  createdAt    DateTime @default(now())
  Group        Group    @relation(fields: [groupId], references: [id])

  @@unique([groupId, phone])
  @@unique([groupId, email])
  @@unique([groupId, memberNumber])
  @@index([groupId], map: "TempMember_groupId_fkey")
}

// 자격증
model Qualification {
  id           Int           @id @default(autoincrement())
  groupId      Int
  title        String        @db.VarChar(50)
  renewalCycle Int           @default(12) // 단위: 달
  Group        Group         @relation(fields: [groupId], references: [id])
  Acquisition  Acquisition[]
}

// 자격 획득 정보
model Acquisition {
  id              Int           @id @default(autoincrement())
  memberId        Int
  qualificationId Int
  acquiredAt      DateTime      @db.Timestamp(0)
  Member          Member        @relation(fields: [memberId], references: [id])
  Qualification   Qualification @relation(fields: [qualificationId], references: [id])
  status          String        @default("active")
  Renewal         Renewal[]
}

// 자격 요건
model Requirement {
  id              Int        @id @default(autoincrement())
  groupId         Int
  qualificationId Int?
  name            String     @db.VarChar(50)
  standard        Int
  type            String
  Group           Group      @relation(fields: [groupId], references: [id])
  Attendee        Attendee[]
}

// 자격 갱신
model Renewal {
  id            Int         @id @default(autoincrement())
  acquisitionId Int
  renewalAt     DateTime    @db.Timestamp(0)
  expiredAt     DateTime    @db.Timestamp(0)
  Acquisition   Acquisition @relation(fields: [acquisitionId], references: [id])
  Group         Group?      @relation(fields: [groupId], references: [id])
  groupId       Int?
  Member        Member?     @relation(fields: [memberId], references: [id])
  memberId      Int?
}

// 활동 내역
model Activity {
  id        Int        @id @default(autoincrement())
  groupId   Int
  category  String //세미나, 포럼
  title     String
  detail    String?
  place     String?
  fee       Int?       @default(0)
  meetingAt DateTime   @db.Timestamp(0)
  Group     Group      @relation(fields: [groupId], references: [id])
  Attendee  Attendee[]
}

// 활동 참여자
model Attendee {
  id            Int  @id @default(autoincrement())
  activityId    Int
  memberId      Int
  requirementId Int?

  Activity    Activity     @relation(fields: [activityId], references: [id])
  Member      Member       @relation(fields: [memberId], references: [id])
  Requirement Requirement? @relation(fields: [requirementId], references: [id])

  @@unique([activityId, memberId])
}

model Payment {
  id        Int      @id @default(autoincrement())
  memberId  Int
  groupId   Int
  item      String   @default("membership")
  amount    Int
  method    String
  paymentAt DateTime @db.Timestamp(0)
  createdAt DateTime @default(now())
  Group     Group    @relation(fields: [groupId], references: [id])
  Member    Member   @relation(fields: [memberId], references: [id])
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @db.VarChar(255)
  issuedAt  DateTime @db.Timestamp(0)
  expiresAt DateTime @db.Timestamp(0)
  isRevoked BigInt   @default(0)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Token_userId_fkey")

  @@index([userId], map: "Token_userId_fkey")
}
