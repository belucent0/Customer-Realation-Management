generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  loginId   String   @unique
  password  String
  userName  String   @db.VarChar(20)
  phone     String   @unique @db.VarChar(11)
  email     String   @unique
  createdAt DateTime @default(now())
  Member    Member[]
  Token     Token[]
}

model Group {
  id          Int           @id @default(autoincrement())
  groupName   String        @unique
  createdAt   DateTime      @default(now())
  Member      Member[]
  Payment     Payment[]
  Renewal     Renewal[]
  Requirement Requirement[]
  TempMember  TempMember[]
  Activity    Activity[]
}

model Member {
  id                Int                 @id @default(autoincrement())
  userId            Int?
  groupId           Int
  joinedAt          DateTime            @default(now())
  memberNumber      String
  userName          String              @db.VarChar(20)
  phone             String              @db.VarChar(11)
  email             String
  postalCode        String              @default("-") @db.VarChar(6)
  address1          String?             @db.VarChar(200)
  address2          String?             @db.VarChar(200)
  grade             String              @default("basic")
  role              String              @default("member")
  status            String              @default("active")
  createdAt         DateTime            @default(now())
  Group             Group               @relation(fields: [groupId], references: [id])
  User              User?               @relation(fields: [userId], references: [id], onDelete: Restrict)
  Payment           Payment[]
  Renewal           Renewal[]
  Activity_Attendee Activity_Attendee[]

  @@unique([userId, groupId])
  @@unique([groupId, phone])
  @@unique([groupId, email])
  @@unique([groupId, memberNumber])
  @@index([groupId], map: "Member_groupId_fkey")
}

model TempMember {
  id           Int      @id @default(autoincrement())
  groupId      Int
  joinedAt     DateTime @default(now())
  memberNumber String
  userName     String   @db.VarChar(20)
  phone        String   @db.VarChar(11)
  email        String
  postalCode   String   @default("-") @db.VarChar(6)
  address1     String?  @db.VarChar(200)
  address2     String?  @db.VarChar(200)
  grade        String   @default("basic")
  role         String   @default("member")
  status       String   @default("active")
  createdAt    DateTime @default(now())
  Group        Group    @relation(fields: [groupId], references: [id])

  @@unique([groupId, phone])
  @@unique([groupId, email])
  @@unique([groupId, memberNumber])
  @@index([groupId], map: "TempMember_groupId_fkey")
}

model Renewal {
  id        Int      @id @default(autoincrement())
  MemberId  Int
  groupId   Int
  nextDate  DateTime @db.Timestamp(0)
  createdAt DateTime @default(now())
  Member    Member   @relation(fields: [MemberId], references: [id])
  Group     Group    @relation(fields: [groupId], references: [id])

  @@index([MemberId], map: "Renewal_MemberId_fkey")
  @@index([groupId], map: "Renewal_groupId_fkey")
}

model Activity {
  id                Int                 @id @default(autoincrement())
  groupId           Int
  category          String
  title             String
  detail            String?
  place             String?
  meetingAt         DateTime            @db.Timestamp(0)
  Group             Group               @relation(fields: [groupId], references: [id])
  Activity_Attendee Activity_Attendee[]
}

model Activity_Attendee {
  id         Int      @id @default(autoincrement())
  activityId Int
  memberId   Int
  Activity   Activity @relation(fields: [activityId], references: [id])
  Member     Member   @relation(fields: [memberId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  memberId  Int
  groupId   Int
  item      String   @default("membership")
  amount    Int
  method    String
  paymentAt DateTime @db.Timestamp(0)
  createdAt DateTime @default(now())
  Group     Group    @relation(fields: [groupId], references: [id])
  Member    Member   @relation(fields: [memberId], references: [id])
}

model Requirement {
  id       Int    @id @default(autoincrement())
  groupId  Int
  name     String @db.VarChar(50)
  reqOrder Int
  Group    Group  @relation(fields: [groupId], references: [id])

  @@index([groupId], map: "Requirement_groupId_fkey")
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @db.VarChar(255)
  issuedAt  DateTime @db.Timestamp(0)
  expiresAt DateTime @db.Timestamp(0)
  isRevoked BigInt   @default(0)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Token_userId_fkey")

  @@index([userId], map: "Token_userId_fkey")
}
